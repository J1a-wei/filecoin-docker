#!/usr/bin/env bash
#set -x
. /etc/lotus/docker/bash-config

repeat() { while :; sleep 3; do $@ && return; done }

# Exit if INFRA_LOTUS_HOME is not defined
validate_env_hard INFRA_LOTUS_HOME;

# Handle INFRA_CLEAR_RESTART variable
function run_clear_restart {
  echo "I'll remove ALL LOTUS DATA from $LOTUS_DIR/";
  echo " -------> Removing ... <---------";
  repeat rm -rf "$LOTUS_DIR/*";
}

validate_env_soft INFRA_CLEAR_RESTART && run_clear_restart;


# Handle INFRA_SECRETVOLUME variable
function handle_persist_node_id {
  if [[ $INFRA_PERSISTNODEID = true ]]; then
    cp $NODE_ID_SOURCE_PATH $NODE_ID_TARGET_PATH;
    return 0;
  fi

  rm -f $NODE_ID_TARGET_PATH;
}

function copy_secrets {
  handle_persist_node_id;
  
  mkdir -p $KEYSTORE_TARGET_DIR;
  
  cp $TOKEN_SOURCE_PATH $TOKEN_TARGET_PATH;
  cp $PRIVATE_KEY_SOURCE_PATH $PRIVATE_KEY_TARGET_PATH;
}

validate_env_soft INFRA_SECRETVOLUME && copy_secrets;

# Set filesystem permissions on the copied secrets
function set_secrets_permissions {
  # Set permissions in the keystore directory to 600
  if [ -d "$KEYSTORE_TARGET_DIR" ]; then
      find "$KEYSTORE_TARGET_DIR/" -type f -exec chmod 600 {} \;
  fi

  # Set permissions to the token file to 600
  if [ -f "$TOKEN_TARGET_PATH" ]; then
      chmod -f 600 "$TOKEN_TARGET_PATH"
  fi
}

set_secrets_permissions;

# Copy config.toml if needed
function copy_config {
  # If config.toml doesn't exist,
  # print out error message and exit.
  if [ ! -f "$LOTUS_CONFIG_SOURCE_PATH" ]; then
    echo "$LOTUS_CONFIG_SOURCE_PATH not found";
    return 0;
  fi

  # If the .lotus directory doesn't exist, create it.
  if [ ! -d "$LOTUS_DIR" ]; then
    mkdir "$LOTUS_DIR"
  fi
  
  # Copy config.toml to the .lotus directory
  cp $LOTUS_CONFIG_SOURCE_PATH $LOTUS_CONFIG_TARGET_PATH
}

copy_config;

# Handle INFRA_IMPORT variable
function run_import {
  echo "Starting import...";
  if [ -f "$SNAPSHOT_DEFAULT_PATH" ] && [ ! -e "$DATASTORE_TARGET_PATH" ]; then
    lotus daemon --halt-after-import --import-chain "$SNAPSHOT_DEFAULT_PATH";
    touch "$IMPORT_COMPLETE_PATH";
  fi
}

validate_env_soft INFRA_IMPORT && run_import;

if [[ -z "$INFRA_IMPORT_SNAPSHOT_FROM_IPFS" ]]
then
  echo "INFRA_IMPORT_SNAPSHOT_FROM_IPFS not defined."
elif [ "$INFRA_IMPORT_SNAPSHOT_FROM_IPFS" = true ]; then
  echo "Fetching IPFS CID..."
  CID=$(curl $SNAPSHOT_CID)
  echo "Fetched. CID is $CID"
  SNAPSHOTURL="$IPFS_GW/$CID"
  echo "Full URL to snapshot is $SNAPSHOTURL"
  INFRA_IMPORT_SNAPSHOT=true
elif [ "$IMPORT_SNAPSHOT_FROM_IPFS" = false ]; then
  echo "IMPORT_SNAPSHOT_FROM_IPFS disabled."
fi

if [ -f "$INFRA_LOTUS_HOME/.lotus/import-complete" ]; then
  echo "IMPORT was completed before."
else
if [ "$INFRA_IMPORT_SNAPSHOT" = true ] ; then
    echo "Starting import wait"
    if [ ! -e "$INFRA_LOTUS_HOME/.lotus/datastore" ]; then
      lotus daemon --halt-after-import --import-snapshot $SNAPSHOTURL
      touch "$INFRA_LOTUS_HOME/.lotus/import-complete"
      else
        rm -fr "$INFRA_LOTUS_HOME/.lotus/datastore/chain/*"
        lotus daemon --halt-after-import --import-snapshot $SNAPSHOTURL
        touch "$INFRA_LOTUS_HOME/.lotus/import-complete"
    fi
elif [ "$INFRA_IMPORT_SNAPSHOT" = false ] ; then
  echo "INFRA_IMPORT_SNAPSHOT disabled."
fi
fi

if [[ -z "$INFRA_SHEDEXPORT" ]]
then
  echo "INFRA_SHEDEXPORT not defined."
elif [ "$INFRA_SHEDEXPORT" = true ]; then
  while true; do
  echo "Exporting state"
  /usr/local/bin/lotus-shed export --skip-old-msgs --recent-stateroots=900 $INFRA_SHEDEXPORTPATH
  timeout $INFRA_SHEDEXPORTPERIOD /usr/local/bin/lotus daemon
  done
elif [ "$INFRA_SHEDEXPORT" = false ]; then
  echo "INFRA_SHEDEXPORT disabled."
fi

function run_sync {
  echo "Starting sync wait...";
  ( repeat lotus sync wait --mir && touch "$INFRA_LOTUS_HOME/.lotus/sync-complete" &);
}

validate_env_soft INFRA_SYNC && run_sync;
