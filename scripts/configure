#!/usr/bin/env bash

. /etc/lotus/docker/bash-config

repeat() { while :; sleep 3; do $@ && return; done }
## Delete all data every pod restart
if [[ -z "$INFRA_CLEAR_RESTART" ]]
then
  echo "INFRA_CLEAR_RESTART not defined"
elif [ "$INFRA_CLEAR_RESTART" = true ]; then
  echo "I'll remove ALL LOTUS DATA from $INFRA_LOTUS_HOME/.lotus/"
  echo " -------> Removing ... <---------"
  repeat rm -rf "$INFRA_LOTUS_HOME/.lotus/*"
elif [ "$INFRA_CLEAR_RESTART" = false ]; then
  echo "INFRA_CLEAR_RESTART disabled."
fi

prepare_config
check_lotus_home_dir

if [[ -z "$INFRA_IMPORT" ]]
then
  echo "INFRA_IMPORT not defined. Please setting up ..."
elif [ "$INFRA_IMPORT" = true ]; then
  echo "Starting import wait"
  CHAIN_CAR="/chain/chain.car"
  if [ -f "$CHAIN_CAR" ] && [ ! -e "$INFRA_LOTUS_HOME/.lotus/datastore" ]; then
    lotus daemon --halt-after-import --import-chain "$CHAIN_CAR"
    touch "$INFRA_LOTUS_HOME/.lotus/import-complete"
  fi
elif [ "$INFRA_IMPORT" = false ]; then
  echo "INFRA_IMPORT disabled."
fi

if [[ -z "$INFRA_IMPORT_SNAPSHOT_FROM_IPFS" ]]
then
  echo "INFRA_IMPORT_SNAPSHOT_FROM_IPFS not defined. Please setting up ..."
elif [ "$INFRA_IMPORT_SNAPSHOT_FROM_IPFS" = true ]; then
  echo "Fetching IPFS CID..."
  CID=$(curl $SNAPSHOT_CID)
  echo "Fetched. CID is $CID"
  SNAPSHOTURL="$IPFS_GW/$CID"
  echo "Full URL to snapshot is $SNAPSHOTURL"
  INFRA_IMPORT_SNAPSHOT=true
elif [ "$IMPORT_SNAPSHOT_FROM_IPFS" = false ]; then
  echo "IMPORT_SNAPSHOT_FROM_IPFS disabled."
fi

if [ -f "$INFRA_LOTUS_HOME/.lotus/import-complete" ]; then
  echo "IMPORT was completed before."
else
if [ "$INFRA_IMPORT_SNAPSHOT" = true ] ; then
    echo "Starting import wait"
    if [ ! -e "$INFRA_LOTUS_HOME/.lotus/datastore" ]; then
      lotus daemon --halt-after-import --import-snapshot $SNAPSHOTURL
      touch "$INFRA_LOTUS_HOME/.lotus/import-complete"
      else
        rm -fr "$INFRA_LOTUS_HOME/.lotus/datastore/chain/*"
        lotus daemon --halt-after-import --import-snapshot $SNAPSHOTURL
        touch "$INFRA_LOTUS_HOME/.lotus/import-complete"
    fi
elif [ "$INFRA_IMPORT_SNAPSHOT" = false ] ; then
  echo "INFRA_IMPORT_SNAPSHOT disabled."
fi
fi

function sync_wait() {
  repeat lotus sync wait &
  if [ $? -eq 0 ]
  then
    touch $INFRA_LOTUS_HOME/.lotus/sync-complete
}

if [[ -z "$INFRA_SYNC" ]]
then
  echo "INFRA_SYNC not defined. Please setting up ..."
elif [ "$INFRA_SYNC" = true ]; then
    echo "Starting sync wait"
    # Start the daemon process and put it in the background
    sync_wait
    # lotus daemon &
    # Run the sync process until it dies
    # repeat lotus sync wait
elif [ "$INFRA_SYNC" = false ]; then
  echo "SYNC disabled."
fi


if [[ -z "$CHAINWATCH" ]]
then
  echo "CHAINWATCH not defined. Please setting up ..."
elif [ "$CHAINWATCH" = true ]; then
  echo "Starting chainwatch"
  # Start the daemon process and put it in the background
  /usr/local/bin/lotus daemon &
  # wait until we are sure daemon is up (chainwatch will fail if daemon is not running and return 0 even when failing so repeat is not working)
  sleep 120
  # Start the chainwatch process
  repeat chainwatch run
elif [ "$CHAINWATCH" = false ]; then
  echo "CHAINWATCH disabled."
fi

if [[ -z "$SHEDEXPORT" ]]
then
  echo "SHEDEXPORT not defined. Please setting up ..."
elif [ "$CHAINWATCH" = true ]; then
  while true; do
  echo "Exporting state"
  /usr/local/bin/lotus-shed export --skip-old-msgs --recent-stateroots=900 $SHEDEXPORTPATH
  timeout $SHEDEXPORTPERIOD /usr/local/bin/lotus daemon
  done
elif [ "$SHEDEXPORT" = false ]; then
  echo "SHEDEXPORT disabled."
fi